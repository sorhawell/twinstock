library(‘quantmod’)
getSymbols(“AAPL”)
chartSeries(AAPL, subset=’last 3 months’)
addBBands()
library(‘quantmod’)
getSymbols(“AAPL”)
clear
# Get quantmod
if (!require("quantmod")) {
install.packages("quantmod")
library(quantmod)
}
getSymbols("AAPL", src = "yahoo")
View(AAPL)
# Let's see the the data
View(AAPL)
candleChart(AAPL, up.col = "black", dn.col = "red", theme = "white")
candleChart(MAERSK-B.CO, up.col = "black", dn.col = "red", theme = "white")
# Let's see the the data
View('MAERSK-B.CO)
# The default behavior for getSymbols is to load data directly into the
# global environment
getSymbols(c("MAERSK-A.CO", "MAERSK-B.CO") src = "yahoo")
# Let's see the the data
View(MAERSK-B.CO)
# Let's see the the data
View('MAERSK-B.CO')
getSymbols(c("MAERSK-A.CO", "MAERSK-B.CO"), src = "yahoo")
getSymbols(c("MAERSK-A.CO", "MAERSK-B.CO"), src = "yahoo")
View(`MAERSK-A.CO`)
View('MAERSK-B.CO')
View(MAERSK-B.CO)
View(`MAERSK-A.CO`)
View(`MAERSK-B.CO`)
candleChart(`MAERSK-A.CO`, up.col = "black", dn.col = "red", theme = "white")
# Create an xts object (xts is loaded with quantmod) that contains closing
# prices for AAPL, MSFT, and GOOG
stocks <- as.xts(data.frame(MAERSK-A.CO = MAERSK-A.CO[, "MAERSK-A.CO.Close"], MAERSK-B.CO = MAERSK-B.CO[, "MAERSK-B.CO.Close"]))
# Create an xts object (xts is loaded with quantmod) that contains closing
# prices for AAPL, MSFT, and GOOG
stocks <- as.xts(data.frame('MAERSK-A.CO' = 'MAERSK-A.CO'[, "MAERSK-A.CO.Close"], 'MAERSK-B.CO' = 'MAERSK-B.CO'[, "MAERSK-B.CO.Close"]))
# Create an xts object (xts is loaded with quantmod) that contains closing
# prices for AAPL, MSFT, and GOOG
stocks <- as.xts(data.frame('MAERSK-A.CO' = 'MAERSK-A.CO'[, "'MAERSK-A.CO'.Close"], 'MAERSK-B.CO' = 'MAERSK-B.CO'[, "'MAERSK-B.CO'.Close"]))
head(stock_change)
head(stock_change)
# Get me my beloved pipe operator!
if (!require("magrittr")) {
install.packages("magrittr")
library(magrittr)
}
library(magrittr)
head(stock_return)
stock_change = stocks %>% log %>% diff
head(stock_return)
head(stock_return)
legend("topleft", c("AAPL (left)", "MSFT (left)", "GOOG"), lty = 1:3, cex = 0.5)
# Get me my beloved pipe operator!
if (!require("magrittr")) {
install.packages("magrittr")
library(magrittr)
}
# Create a plot showing all series as lines; must use as.zoo to use the zoo
# method for plot, which allows for multiple series to be plotted on same
# plot
plot(as.zoo(stocks), screens = 1, lty = 1:3, xlab = "Date", ylab = "Price")
stocks <- as.xts(data.frame(AAPL = AAPL[, "AAPL.Close"], MSFT = MSFT[, "MSFT.Close"],
GOOG = GOOG[, "GOOG.Close"]))
plot(as.zoo(stocks), screens = 1, lty = 1:3, xlab = "Date", ylab = "Price")
legend("right", c("AAPL", "MSFT", "GOOG"), lty = 1:3, cex = 0.5)
legend("right", c("AAPL", "MSFT", "GOOG"), lty = 1:3, cex = 0.5)
plot(as.zoo(stocks), screens = 1, lty = 1:3, xlab = "Date", ylab = "Price")
stocks <- as.xts(data.frame(AAPL = AAPL[, "AAPL.Close"], MSFT = MSFT[, "MSFT.Close"], GOOG = GOOG[, "GOOG.Close"]))
plot(as.zoo(stocks), screens = 1, lty = 1:3, xlab = "Date", ylab = "Price")
legend("right", c("AAPL", "MSFT", "GOOG"), lty = 1:3, cex = 0.5)
plot(as.zoo(stocks[, c("AAPL.Close", "MSFT.Close")]), screens = 1, lty = 1:2,
xlab = "Date", ylab = "Price")
getSymbols("GOOG", src = "yahoo", from = start, to = end)
stocks <- as.xts(data.frame(AAPL = AAPL[, "AAPL.Close"], MSFT = MSFT[, "MSFT.Close"], GOOG = GOOG[, "GOOG.Close"]))
# Get quantmod
if (!require("quantmod")) {
install.packages("quantmod")
library(quantmod)
}
start <- as.Date("2016-01-01")
end <- as.Date("2016-10-01")
# Let's get Apple stock data; Apple's ticker symbol is AAPL. We use the
# quantmod function getSymbols, and pass a string as a first argument to
# identify the desired ticker symbol, pass 'yahoo' to src for Yahoo!
# Finance, and from and to specify date ranges
# The default behavior for getSymbols is to load data directly into the
# global environment, with the object being named after the loaded ticker
# symbol. This feature may become deprecated in the future, but we exploit
# it now.
getSymbols("AAPL", src = "yahoo", from = start, to = end)
candleChart(AAPL, up.col = "black", dn.col = "red", theme = "white")
getSymbols("MSFT", src = "yahoo", from = start, to = end)
candleChart(MSFT, up.col = "black", dn.col = "red", theme = "white")
getSymbols("GOOG", src = "yahoo", from = start, to = end)
getSymbols("GOOG", src = "yahoo", from = start, to = end)
stocks <- as.xts(data.frame(AAPL = AAPL[, "AAPL.Close"], MSFT = MSFT[, "MSFT.Close"], GOOG = GOOG[, "GOOG.Close"]))
plot(as.zoo(stocks), screens = 1, lty = 1:3, xlab = "Date", ylab = "Price")
plot(as.zoo(stocks[, c("AAPL.Close", "MSFT.Close")]), screens = 1, lty = 1:2,
xlab = "Date", ylab = "Price")
par(new = TRUE)
plot(as.zoo(stocks[, "GOOG.Close"]), screens = 1, lty = 3, xaxt = "n", yaxt = "n",
xlab = "", ylab = "")
axis(4)
mtext("Price", side = 4, line = 3)
legend("topleft", c("AAPL (left)", "MSFT (left)", "GOOG"), lty = 1:3, cex = 0.5)
stock_return = apply(stocks, 1, function(x) {x / stocks[1,]}) %>%
t %>% as.xts
head(stock_return)
stock_change = stocks %>% log %>% diff
head(stock_change)
stock_return = apply(stocks, 1, function(x) {x / stocks[1,]}) %>%
t %>% as.xts
head(stock_return)
stock_change = stocks %>% log %>% diff
head(stock_change)
plot(as.zoo(stock_change), screens = 1, lty = 1:3, xlab = "Date", ylab = "Log Difference")
legend("topleft", c("AAPL", "MSFT", "GOOG"), lty = 1:3, cex = 0.5)
head(stock_change)
plot(as.zoo(stock_change), screens = 1, lty = 1:3, xlab = "Date", ylab = "Log Difference")
library(quantmod)
# Get quantmod
if (!require("quantmod")) {
install.packages("quantmod")
library(quantmod)
}
x11()
# Get quantmod
if (!require("quantmod")) {
install.packages("quantmod")
library(quantmod)
}
plot(as.zoo(stocks), screens = 1, lty = 1:3, xlab = "Date", ylab = "Price")
legend("right", c("AAPL", "MSFT", "GOOG"), lty = 1:3, cex = 0.5)
plot(as.zoo(stocks[, c("AAPL.Close", "MSFT.Close")]), screens = 1, lty = 1:2,
xlab = "Date", ylab = "Price")
par(new = TRUE)
plot(as.zoo(stocks[, "GOOG.Close"]), screens = 1, lty = 3, xaxt = "n", yaxt = "n",
xlab = "", ylab = "")
axis(4)
mtext("Price", side = 4, line = 3)
legend("topleft", c("AAPL (left)", "MSFT (left)", "GOOG"), lty = 1:3, cex = 0.5)
x11()
if (!require("magrittr")) {
install.packages("magrittr")
library(magrittr)
}
plot(as.zoo(stock_change), screens = 1, lty = 1:3, xlab = "Date", ylab = "Log Difference")
legend("topleft", c("AAPL", "MSFT", "GOOG"), lty = 1:3, cex = 0.5)
x11()
x11(plot(as.zoo(stock_change), screens = 1, lty = 1:3, xlab = "Date", ylab = "Log Difference")
legend("topleft", c("AAPL", "MSFT", "GOOG"), lty = 1:3, cex = 0.5))
x11(plot(as.zoo(stock_change), screens = 1, lty = 1:3, xlab = "Date", ylab = "Log Difference")
legend("topleft", c("AAPL", "MSFT", "GOOG"), lty = 1:3, cex = 0.5))
plot(as.zoo(stock_change), screens = 1, lty = 1:3, xlab = "Date", ylab = "Log Difference")
legend("topleft", c("AAPL", "MSFT", "GOOG"), lty = 1:3, cex = 0.5)
# Create a plot showing all series as lines; must use as.zoo to use the zoo
# method for plot, which allows for multiple series to be plotted on same
# plot
par(mfrow=c(2,2))
plot(as.zoo(stocks), screens = 1, lty = 1:3, xlab = "Date", ylab = "Price")
plot(as.zoo(stocks[, c("AAPL.Close", "MSFT.Close")]), screens = 1, lty = 1:2,
xlab = "Date", ylab = "Price")
candleChart(MSFT, up.col = "black", dn.col = "red", theme = "white")
stocks <- as.xts(data.frame(AAPL = AAPL[, "AAPL.Close"], MSFT = MSFT[, "MSFT.Close"], GOOG = GOOG[, "GOOG.Close"]))
# 4 figures arranged in 2 rows and 2 columns
attach(mtcars)
par(mfrow=c(2,2))
plot(wt,mpg, main="Scatterplot of wt vs. mpg")
plot(wt,disp, main="Scatterplot of wt vs disp")
hist(wt, main="Histogram of wt")
boxplot(wt, main="Boxplot of wt")
plot(wt,mpg, main="Scatterplot of wt vs. mpg")
plot(wt,disp, main="Scatterplot of wt vs disp")
boxplot(wt, main="Boxplot of wt")
plot(wt,disp, main="Scatterplot of wt vs disp")
hist(wt, main="Histogram of wt")
boxplot(wt, main="Boxplot of wt")
# 4 figures arranged in 2 rows and 2 columns
attach(mtcars)
par(mfrow=c(2,2))
plot(wt,mpg, main="Scatterplot of wt vs. mpg")
plot(wt,disp, main="Scatterplot of wt vs disp")
hist(wt, main="Histogram of wt")
boxplot(wt, main="Boxplot of wt")
# Get quantmod
if (!require("quantmod")) {
install.packages("quantmod")
library(quantmod)
}
start <- as.Date("2016-01-01")
end <- as.Date("2016-10-01")
# Let's get Apple stock data; Apple's ticker symbol is AAPL. We use the
# quantmod function getSymbols, and pass a string as a first argument to
# identify the desired ticker symbol, pass 'yahoo' to src for Yahoo!
# Finance, and from and to specify date ranges
# The default behavior for getSymbols is to load data directly into the
# global environment, with the object being named after the loaded ticker
# symbol. This feature may become deprecated in the future, but we exploit
# it now.
getSymbols("AAPL", src = "yahoo", from = start, to = end)
candleChart(AAPL, up.col = "black", dn.col = "red", theme = "white")
# Let's get data for Microsoft (MSFT) and Google (GOOG) (actually, Google is
# held by a holding company called Alphabet, Inc., which is the company
# traded on the exchange and uses the ticker symbol GOOG).
getSymbols("MSFT", src = "yahoo", from = start, to = end)
candleChart(MSFT, up.col = "black", dn.col = "red", theme = "white")
getSymbols("GOOG", src = "yahoo", from = start, to = end)
# Create an xts object (xts is loaded with quantmod) that contains closing
# prices for AAPL, MSFT, and GOOG
stocks <- as.xts(data.frame(AAPL = AAPL[, "AAPL.Close"], MSFT = MSFT[, "MSFT.Close"], GOOG = GOOG[, "GOOG.Close"]))
# Create a plot showing all series as lines; must use as.zoo to use the zoo
# method for plot, which allows for multiple series to be plotted on same
# plot
#FOR SOME STUPID REASON generating mulitple plots does not work in RStudio on mac
#plot(as.zoo(stocks), screens = 1, lty = 1:3, xlab = "Date", ylab = "Price")
#legend("right", c("AAPL", "MSFT", "GOOG"), lty = 1:3, cex = 0.5)
plot(as.zoo(stocks[, c("AAPL.Close", "MSFT.Close")]), screens = 1, lty = 1:2,
xlab = "Date", ylab = "Price")
par(new = TRUE)
plot(as.zoo(stocks[, "GOOG.Close"]), screens = 1, lty = 3, xaxt = "n", yaxt = "n",
xlab = "", ylab = "")
axis(4)
mtext("Price", side = 4, line = 3)
legend("topleft", c("AAPL (left)", "MSFT (left)", "GOOG"), lty = 1:3, cex = 0.5)
# Get me my beloved pipe operator!
if (!require("magrittr")) {
install.packages("magrittr")
library(magrittr)
}
stock_return = apply(stocks, 1, function(x) {x / stocks[1,]}) %>%
t %>% as.xts
head(stock_return)
stock_change = stocks %>% log %>% diff
head(stock_change)
plot(as.zoo(stock_change), screens = 1, lty = 1:3, xlab = "Date", ylab = "Log Difference")
legend("topleft", c("AAPL", "MSFT", "GOOG"), lty = 1:3, cex = 0.5)
source('~/Google Drive/stock analysis/Stock_Analysis_demo.R')
source('~/Google Drive/stock analysis/Stock_Analysis_demo.R')
source('~/Google Drive/stock analysis/Stock_Analysis_demo.R')
source('~/Google Drive/stock analysis/Stock analysis.R')
source('~/Google Drive/stock analysis/Stock analysis.R')
source('~/Google Drive/stock analysis/Stock analysis.R')
# Get quantmod
if (!require("quantmod")) {
install.packages("quantmod")
library(quantmod)
}
# Let's get Apple stock data; Apple's ticker symbol is AAPL. We use the
# quantmod function getSymbols, and pass a string as a first argument to
# identify the desired ticker symbol, pass 'yahoo' to src for Yahoo!
# Finance (and from and to specify date ranges)
# The default behavior for getSymbols is to load data directly into the
# global environment
getSymbols(c("MAERSK-A.CO", "MAERSK-B.CO"), src = "yahoo")
# Let's see the the data
View(`MAERSK-A.CO`)
View(`MAERSK-B.CO`)
# Let’s briefly discuss this. getSymbols() created in the global environment an object called AAPL (named automatically after the ticker symbol of the security retrieved) that is of the xts class (which is also a zoo-class object). xts objects (provided in the xts package) are seen as improved versions of the ts object for storing time series data. They allow for time-based indexing and provide custom attributes, along with allowing multiple (presumably related) time series with the same time index to be stored in the same object. (Here is a vignette describing xts objects.) The different series are the columns of the object, with the name of the associated security (here, AAPL) being prefixed to the corresponding series.
#Yahoo! Finance provides six series with each security. Open is the price of the stock at the beginning of the trading day (it need not be the closing price of the previous trading day), high is the highest price of the stock on that trading day, low the lowest price of the stock on that trading day, and close the price of the stock at closing time. Volume indicates how many stocks were traded. Adjusted close (abreviated as “adjusted” by getSymbols()) is the closing price of the stock that adjusts the price of the stock for corporate actions. While stock prices are considered to be set mostly by traders, stock splits (when the company makes each extant stock worth two and halves the price) and dividends (payout of company profits per share) also affect the price of a stock and should be accounted for.
candleChart(`MAERSK-A.CO`, up.col = "black", dn.col = "red", theme = "white")
# Create an xts object (xts is loaded with quantmod) that contains closing
# prices for AAPL, MSFT, and GOOG
stocks <- as.xts(data.frame(MAERSK-A.CO = MAERSK-A.CO[, "MAERSK-A.CO.Close"], MAERSK-B.CO = MAERSK-B.CO[, "MAERSK-B.CO.Close"]))
head(stocks)
# Get quantmod
if (!require("quantmod")) {
install.packages("quantmod")
library(quantmod)
}
# Let's get Apple stock data; Apple's ticker symbol is AAPL. We use the
# quantmod function getSymbols, and pass a string as a first argument to
# identify the desired ticker symbol, pass 'yahoo' to src for Yahoo!
# Finance (and from and to specify date ranges)
# The default behavior for getSymbols is to load data directly into the
# global environment
getSymbols(c("MAERSK-A.CO", "MAERSK-B.CO"), src = "yahoo")
# Let's see the the data
View(`MAERSK-A.CO`)
View(`MAERSK-B.CO`)
# Let’s briefly discuss this. getSymbols() created in the global environment an object called AAPL (named automatically after the ticker symbol of the security retrieved) that is of the xts class (which is also a zoo-class object). xts objects (provided in the xts package) are seen as improved versions of the ts object for storing time series data. They allow for time-based indexing and provide custom attributes, along with allowing multiple (presumably related) time series with the same time index to be stored in the same object. (Here is a vignette describing xts objects.) The different series are the columns of the object, with the name of the associated security (here, AAPL) being prefixed to the corresponding series.
#Yahoo! Finance provides six series with each security. Open is the price of the stock at the beginning of the trading day (it need not be the closing price of the previous trading day), high is the highest price of the stock on that trading day, low the lowest price of the stock on that trading day, and close the price of the stock at closing time. Volume indicates how many stocks were traded. Adjusted close (abreviated as “adjusted” by getSymbols()) is the closing price of the stock that adjusts the price of the stock for corporate actions. While stock prices are considered to be set mostly by traders, stock splits (when the company makes each extant stock worth two and halves the price) and dividends (payout of company profits per share) also affect the price of a stock and should be accounted for.
candleChart(`MAERSK-A.CO`, up.col = "black", dn.col = "red", theme = "white")
# Create an xts object (xts is loaded with quantmod) that contains closing
# prices for AAPL, MSFT, and GOOG
stocks <- as.xts(data.frame(`MAERSK-A.CO` = `MAERSK-A.CO`[, "MAERSK-A.CO.Close"], `MAERSK-B.CO` = `MAERSK-B.CO`[, "MAERSK-B.CO.Close"]))
head(stocks)
Delt(`MAERSK-A.CO`, type=c)
Delt("MAERSK-A.CO.Close", type=c)
Delt("MAERSK-A.CO.Close", "MAERSK-B.CO.Close", type='arithmetic')
Delt(`MAERSK-A.CO`, `MAERSK-B.CO`, type='arithmetic')
Delt(`MAERSK-A.CO`[, "MAERSK-A.CO.Close"], `MAERSK-B.CO`[, "MAERSK-B.CO.Close"], type='arithmetic')
plot(Delt(`MAERSK-A.CO`[, "MAERSK-A.CO.Close"], `MAERSK-B.CO`[, "MAERSK-B.CO.Close"], type='arithmetic'))
plot(Delt(`MAERSK-A.CO`[, "MAERSK-A.CO.Close"], `MAERSK-B.CO`[, "MAERSK-B.CO.Close"], type='arithmetic'), main="Delta Maersk A vs Maersk B")
plot((Delt(`MAERSK-A.CO`[, "MAERSK-A.CO.Close"], `MAERSK-B.CO`[, "MAERSK-B.CO.Close"], type='arithmetic'))*100, main="Delta Maersk A vs Maersk B")
plot((Delt(`MAERSK-A.CO`[, "MAERSK-A.CO.Close"], `MAERSK-B.CO`[, "MAERSK-B.CO.Close"], type='arithmetic'))*100, ylab="pct", main="Delta Maersk A vs Maersk B")
plot((Delt(`MAERSK-A.CO`[, "MAERSK-A.CO.Close"], `MAERSK-B.CO`[, "MAERSK-B.CO.Close"], type='arithmetic'))*100, ylab="pct", main="Delta % Maersk B vs Maersk A")
plot((Delt(`MAERSK-A.CO`[, "MAERSK-A.CO.Close"], `MAERSK-B.CO`[, "MAERSK-B.CO.Close"], type='arithmetic'))*100, ylab="pct", main="Delta (pct) Maersk B vs Maersk A")
plot((Delt(`ERIC-A.ST`[, "ERIC-A.ST.Close"], `ERIC-B.ST`[, "ERIC-B.ST.CO.Close"], type='arithmetic'))*100, ylab="pct", main="Delta (pct) Ericsson B vs Ericsson A")
plot((Delt(`ERIC-A.ST`[, "ERIC-A.ST.Close"], `ERIC-B.ST`[, "ERIC-B.ST.CO.Close"], type='arithmetic'))*100, ylab="pct", main="Delta (pct) Ericsson B vs Ericsson A")
source('~/Google Drive/stock analysis/Stock analysis.R')
View(`ERIC-A.ST`)
View(`ERIC-B.ST`)
plot((Delt(`ERIC-A.ST`[, "ERIC-A.ST.Close"], `ERIC-B.ST`[, "ERIC-B.ST.CO.Close"], type='arithmetic'))*100, ylab="pct", main="Delta (pct) Ericsson B vs Ericsson A")
options(error=recover)
reach_full_in <- reachability(krack_full, 'in')
plot((Delt(`ERIC-A.ST`[, "ERIC-A.ST.Close"], `ERIC-B.ST`[, "ERIC-B.ST.CO.Close"], type='arithmetic'))*100, ylab="pct", main="Delta (pct) Ericsson B vs Ericsson A")
source('~/Google Drive/stock analysis/Stock analysis.R')
plot((Delt(`ERIC-A.ST`[, "ERIC-A.ST.Close"], `ERIC-B.ST`[, "ERIC-B.ST.CO.Close"], type='arithmetic'))*100, main="Delta (pct) Ericsson B vs Ericsson A")
options(error=NULL)
plot((Delt(`ERIC-A.ST`[, "ERIC-A.ST.Close"], `ERIC-B.ST`[, "ERIC-B.ST.CO.Close"], type='arithmetic'))*100, main="Delta (pct) Ericsson B vs Ericsson A")
source('~/Google Drive/stock analysis/Stock analysis.R')
getSymbols(c("MAERSK-A.CO", "MAERSK-B.CO"), src = "yahoo")
na.approx(c("MAERSK-A.CO", "MAERSK-B.CO"))
na.omit(c("MAERSK-A.CO", "MAERSK-B.CO"))
source('~/Google Drive/stock analysis/Stock analysis.R')
source('~/Google Drive/stock analysis/Stock analysis.R')
ok
source('~/Google Drive/stock analysis/Stock analysis.R')
source('~/Google Drive/stock analysis/Stock analysis.R')
source('~/Google Drive/stock analysis/Stock analysis.R')
source('~/Google Drive/stock analysis/Stock analysis.R')
source('~/Google Drive/stock analysis/Stock analysis.R')
View(stock_change)
source('~/Google Drive/stock analysis/Stock analysis.R')
